project(HFRep_interior_df)
cmake_minimum_required(VERSION 3.0)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(PROJECT_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include_directories( BEFORE ./ ./include )

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS " -lstdc++ -lm -pthread ${CMAKE_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O3")

find_package(Eigen3 3.3.9 REQUIRED)
find_package(Python COMPONENTS Development NumPy)
find_package(OpenGL)
find_package(GTS)
#find_package(glad)
find_package(PkgConfig REQUIRED)
pkg_search_module(GLIB REQUIRED glib-2.0)
include_directories(${GLIB_INCLUDE_DIRS})

option(USE_OPENMP   ON)
option(USE_MATPLOT_LIB_C++ ON)

if(USE_MATPLOT_LIB_C++)
    add_definitions(-DUSE_MATPLOTLIB)
endif()

if(USE_OPENMP)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        message("clang compiler is used!")
        set(CMAKE_CXX_FLAGS "-fopenmp=libomp ${CMAKE_CXX_FLAGS}")
    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
        message("intel compiler is used!")
        set(CMAKE_CXX_FLAGS "-qopenmp ${CMAKE_CXX_FLAGS}")
    else()
        message("gcc compiler is used!")
        set(CMAKE_CXX_FLAGS "-fopenmp ${CMAKE_CXX_FLAGS}")
    endif()
endif(USE_OPENMP)

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -qopt-report=5 -xCORE-AVX2")
endif()

link_directories("${CMAKE_CURRENT_SOURCE_DIR}/HIDF/external/libIgl/lib")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/HIDF/external/glad/lib")

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/HIDF/external/libIgl/include")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/HIDF/external/glad/include")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/HIDF/external")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/HIDF/include")

add_subdirectory(HIDF)
add_subdirectory(samples)